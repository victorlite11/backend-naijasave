import { FilterQuery } from 'mongodb';
import { DepositRequestDto } from 'src/shared/dto/deposit-request/deposit-request-dto';
import { SignupRequestDto } from 'src/shared/dto/signup-request/signup-request-dto';
import { WithdrawalRequestDto } from 'src/shared/dto/withdrawal-request/withdrawal-request-dto';
import { OperationFeedback } from 'src/shared/interface/shared-interfaces';
import { AdminService } from '../admin/admin.service';
import { CompanyService } from '../company/company.service';
import { ContributorsService } from '../contributors/contributors.service';
import { DbMediatorService } from '../db-mediator/db-mediator.service';
import { EntitiesMediatorService } from '../entities-mediator/entities-mediator/entities-mediator.service';
import { QualificationService } from '../qualification/qualification.service';
import { SmsMediatorService } from '../sms-mediator/sms-mediator/sms-mediator.service';
import { TransactionsService } from '../transactions/transactions.service';
export declare class RequestsService {
    private dbMediatorService;
    private entitiesMediatorService;
    private contributorsService;
    private qualificationService;
    private adminService;
    private companyService;
    private smsMediatorService;
    private transactionsService;
    constructor(dbMediatorService: DbMediatorService, entitiesMediatorService: EntitiesMediatorService, contributorsService: ContributorsService, qualificationService: QualificationService, adminService: AdminService, companyService: CompanyService, smsMediatorService: SmsMediatorService, transactionsService: TransactionsService);
    fetchSignupRequests(overseer_id?: string): Promise<SignupRequestDto[]>;
    fetchSignupRequest(id: string): Promise<SignupRequestDto>;
    insertSignupRequest(req: SignupRequestDto): Promise<void>;
    deleteSignupRequest(id: string): Promise<void>;
    updateSignupRequest(id: string, update: boolean, newData: SignupRequestDto): Promise<void>;
    insertDepositRequest(request: DepositRequestDto): Promise<boolean>;
    private checkIfContributorHasPaidHisDailySavingsForTheDate;
    private checkIfContributorHasAPendingDailySavingsDepositRequest;
    forwardDepositRequestToOverseer(request_id: string, overseer_id: string): Promise<OperationFeedback>;
    forwardWithdrawalRequestToOverseer(request_id: string, overseer_id: string): Promise<OperationFeedback>;
    insertWithdrawalRequest(request: WithdrawalRequestDto): Promise<boolean>;
    fetchWithdrawalRequests(overseer_id?: string): Promise<WithdrawalRequestDto[]>;
    fetchWithdrawalRequest(request_id: string): Promise<WithdrawalRequestDto>;
    deleteWithdrawalRequest(request_id: string): Promise<void>;
    deleteDepositRequest(request_id: string): Promise<void>;
    fetchDepositRequest(request_id: string, query?: FilterQuery<DepositRequestDto>): Promise<DepositRequestDto>;
    fetchDepositRequests(overseer_id?: string): Promise<Array<DepositRequestDto>>;
}
