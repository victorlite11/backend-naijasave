import { FilterQuery, UpdateQuery } from 'mongodb';
import { AdminAccountModel, AdminDto } from 'src/shared/dto/admin/admin-dto';
import { AnnouncementsDto } from 'src/shared/dto/announcements/announcements-dto';
import { ChatsContainerDto } from 'src/shared/dto/chat/chat-dto';
import { CompanyDto } from 'src/shared/dto/company/company-dto';
import { AccountModel, ContributorDto, IdentityModel, PrivilegeModel } from 'src/shared/dto/contributor/contributor-dto';
import { DepositRequestDto } from 'src/shared/dto/deposit-request/deposit-request-dto';
import { PaymentDto } from 'src/shared/dto/payment/payment-dto';
import { SignupRequestDto } from 'src/shared/dto/signup-request/signup-request-dto';
import { WithdrawalRequestDto } from 'src/shared/dto/withdrawal-request/withdrawal-request-dto';
import { DbLookupData, IAuthKey, IRegisterActionRequest, OperationFeedback, SMSProforma } from 'src/shared/interface/shared-interfaces';
export declare class DbMediatorService {
    private uri;
    private dbName;
    private collections;
    private sessionTransactionOptions;
    fetchOne<T>(query: FilterQuery<T>, dbLookupData: DbLookupData): Promise<T>;
    fetchAll<T>(query: FilterQuery<T>, dbLookupData: DbLookupData): Promise<T[]>;
    insertOne<T>(doc: T, dbLookupData: DbLookupData): Promise<OperationFeedback>;
    updateOne<T>(filter: FilterQuery<T>, update: UpdateQuery<T>, dbLookupData: DbLookupData): Promise<OperationFeedback>;
    deleteOne<T>(query: FilterQuery<T>, dbLookupData: DbLookupData): Promise<OperationFeedback>;
    insertAuthToken(authKeyObject: IAuthKey): Promise<void>;
    fetchAuthToken(query: FilterQuery<IAuthKey>): Promise<IAuthKey>;
    updateAuthToken(tokenQuery: FilterQuery<IAuthKey>, update: UpdateQuery<IAuthKey>): Promise<void>;
    deleteToken(query: FilterQuery<IAuthKey>): Promise<void>;
    insertInSuccessfulTransactions(payment: PaymentDto): Promise<void>;
    fetchAllSuccessfulTransactions(): Promise<PaymentDto[]>;
    fetchSuccessfulTransactions(contributor_id: string): Promise<PaymentDto[]>;
    fetchSuccessfulTransaction(payment_id: string): Promise<PaymentDto>;
    deleteFromSuccessfulTransactions(id: string): Promise<void>;
    insertInFailedTransactions(payment: PaymentDto): Promise<void>;
    deleteFromFailedTransactions(id: string): Promise<void>;
    insertInOngoingTransactions(payment: PaymentDto): Promise<void>;
    deleteFromOngoingTransactions(id: string): Promise<void>;
    updateAdminAccount(payload: {
        _id: string;
        account: AdminAccountModel;
    }): Promise<void>;
    updateContributorAccount(payload: {
        _id: string;
        account: AccountModel;
    }): Promise<void>;
    registerContributorAction(payload: IRegisterActionRequest): Promise<void>;
    registerAdminAction(payload: IRegisterActionRequest): Promise<void>;
    fetchContributor(query: FilterQuery<ContributorDto>): Promise<ContributorDto>;
    fetchContributors(query: FilterQuery<ContributorDto>): Promise<ContributorDto[]>;
    createContributor(signupRequestId: string, contributor: ContributorDto): Promise<void>;
    deleteContributor(query: FilterQuery<any>): Promise<import("mongodb").DeleteWriteOpResultObject>;
    insertSignupRequest(req: SignupRequestDto): Promise<void>;
    replaceSignupRequest(query: FilterQuery<SignupRequestDto>, req: SignupRequestDto): Promise<OperationFeedback>;
    fetchSignupRequest(query: FilterQuery<SignupRequestDto>): Promise<SignupRequestDto>;
    fetchSignupRequests(query: FilterQuery<SignupRequestDto>): Promise<SignupRequestDto[]>;
    deleteSignupRequest(id: string): Promise<void>;
    insertDepositRequest(req: DepositRequestDto): Promise<void>;
    updateDepositRequest(filter: FilterQuery<DepositRequestDto>, update: UpdateQuery<any>): Promise<OperationFeedback>;
    deleteDepositRequest(query: FilterQuery<DepositRequestDto>): Promise<void>;
    fetchDepositRequest(query: FilterQuery<DepositRequestDto>): Promise<DepositRequestDto>;
    fetchDepositRequests(query: FilterQuery<DepositRequestDto>): Promise<DepositRequestDto[]>;
    insertWithdrawalRequest(req: WithdrawalRequestDto): Promise<void>;
    updateWithdrawalRequest(filter: FilterQuery<WithdrawalRequestDto>, update: UpdateQuery<any>): Promise<OperationFeedback>;
    fetchWithdrawalRequest(query: FilterQuery<WithdrawalRequestDto>): Promise<WithdrawalRequestDto>;
    deleteWithdrawalRequest(query: FilterQuery<WithdrawalRequestDto>): Promise<void>;
    fetchWithdrawalRequests(query: FilterQuery<WithdrawalRequestDto>): Promise<WithdrawalRequestDto[]>;
    fetchAnnouncements(query: FilterQuery<AnnouncementsDto>): Promise<AnnouncementsDto[]>;
    fetchAnnouncement(query: FilterQuery<AnnouncementsDto>): Promise<AnnouncementsDto>;
    deleteAnnouncement(query: FilterQuery<AnnouncementsDto>): Promise<OperationFeedback>;
    replaceAnnouncement(query: FilterQuery<AnnouncementsDto>, new_announcement: AnnouncementsDto): Promise<OperationFeedback>;
    insertAnnouncement(announcement: AnnouncementsDto): Promise<void>;
    fetchContributorPrivilege(contributor_id: string): Promise<PrivilegeModel>;
    updateContributor(filter: FilterQuery<ContributorDto>, update: UpdateQuery<any>): Promise<OperationFeedback>;
    fetchContributorIdentity(contributor_id: string): Promise<IdentityModel>;
    assignSubordinates(new_overseer_id: string, subordinates_id_list: string[]): Promise<OperationFeedback>;
    updateContributorReferral(filter: FilterQuery<ContributorDto>, update: UpdateQuery<any>): Promise<OperationFeedback>;
    updateContributorPaymentTicks(filter: FilterQuery<ContributorDto>, update: UpdateQuery<any>): Promise<OperationFeedback>;
    insertAdmin(adminObject: AdminDto): Promise<void>;
    fetchAdmin(query: FilterQuery<AdminDto>): Promise<AdminDto>;
    fetchAdmins(query: FilterQuery<AdminDto>): Promise<AdminDto[]>;
    updateAdmin(query: FilterQuery<AdminDto>, update: UpdateQuery<AdminDto>): Promise<OperationFeedback>;
    insertNewCompanyData(companyObject: CompanyDto): Promise<void>;
    fetchCompanyData(query: FilterQuery<CompanyDto>): Promise<CompanyDto>;
    updateCompanyData(query: FilterQuery<CompanyDto>, update: UpdateQuery<CompanyDto>): Promise<OperationFeedback>;
    fetchChatsContainer(query: FilterQuery<ChatsContainerDto>): Promise<ChatsContainerDto>;
    fetchChatsContainers(query: FilterQuery<ChatsContainerDto>): Promise<ChatsContainerDto[]>;
    updateChatsContainer(query: FilterQuery<ChatsContainerDto>, update: UpdateQuery<ChatsContainerDto>): Promise<OperationFeedback>;
    insertChatsContainer(chatsContainer: ChatsContainerDto): Promise<OperationFeedback>;
    insertSMSProforma(smsProforma: SMSProforma): Promise<void>;
    fetchSMSProforma(query: FilterQuery<SMSProforma>): Promise<SMSProforma>;
    fetchSMSProformas(query: FilterQuery<SMSProforma>): Promise<SMSProforma[]>;
    updateSMSProforma(query: FilterQuery<SMSProforma>, update: UpdateQuery<SMSProforma>): Promise<OperationFeedback>;
    private openConnection;
    private closeConnection;
    private useSession;
    private endSession;
}
